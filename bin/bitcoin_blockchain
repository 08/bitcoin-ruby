#!/usr/bin/env ruby
$:.unshift( File.expand_path("../../lib", __FILE__) )

require 'bitcoin'
require 'optparse'

options = {
  :network => "testnet",
  :listen => "0.0.0.0:18332",
  :connect => "",
  :storage => "dummy",
  :max_connections => 32,
  :max_addr => 1024,
  :max_queue => 512,
  :max_inv => 512,
}
optparse = OptionParser.new do|opts|
  opts.banner = "Usage: bitcoin_node [options]"

  opts.on("-n", "--network [NETWORK]",
          "User Network (default: #{options[:network]})") do |network|
    options[:network] = network
  end

  end

  opts.on("-l", "--listen [HOST:PORT]",
          "Listen address/port (default: #{options[:listen]})") do |listen|
    options[:listen] = listen
  end

  opts.on("-c", "--connect [HOST:PORT[,HOST:PORT[...]]]",
          "Hosts to connect to (default: #{options[:connect]})") do |connect|
    options[:connect] = connect
  end

  opts.on("-s", "--storage [BACKEND::CONFIG]",
          "Use storage backend (default: #{options[:storage]})") do |storage|
    options[:storage] = storage
  end


  opts.on("--mc", "--max-connections [COUNT]",
          "Max connections (default: #{options[:max_connections]})") do |count|
    options[:max_connections] = count.to_i
  end

  opts.on("--ma", "--max-addr [COUNT]",
          "Max size of addr queue (default: #{options[:max_addr]})") do |count|
    options[:max_addr] = count.to_i
  end

  opts.on("--mq", "--max_queue [COUNT]",
          "Max size of download/storage queue (default: #{options[:max_queue]})") do |count|
    options[:max_queue] = count.to_i
  end

  opts.on("--mi", "--max_inv [COUNT]",
          "Max size of inv queue (default: #{options[:max_inv]})") do |count|
    options[:max_inv] = count.to_i
  end
  opts.on( '-h', '--help', 'Display this screen' ) do
    puts opts
    exit
  end
end

optparse.parse!

Bitcoin.network = options[:network]
options[:listen] = options[:listen] == "" ? nil : options[:listen].split(':')
options[:connect] = options[:connect] == "" ? [] : options[:connect].split(',').map{|h| h.split(':')}
backend, config = options[:storage].split('::')
options[:storage] = Bitcoin::Storage.send(backend, {:db => config})

node = Bitcoin::Network::Node.new(options)
node.run
